/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Giocatore as PrismaGiocatore,
  Mano as PrismaMano,
  Mossa as PrismaMossa,
} from "@prisma/client";

import { UpdateSaldoDto } from "../UpdateSaldoDto";

export class GiocatoreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GiocatoreCountArgs, "select">
  ): Promise<number> {
    return this.prisma.giocatore.count(args);
  }

  async giocatores(
    args: Prisma.GiocatoreFindManyArgs
  ): Promise<PrismaGiocatore[]> {
    return this.prisma.giocatore.findMany(args);
  }
  async giocatore(
    args: Prisma.GiocatoreFindUniqueArgs
  ): Promise<PrismaGiocatore | null> {
    return this.prisma.giocatore.findUnique(args);
  }
  async createGiocatore(
    args: Prisma.GiocatoreCreateArgs
  ): Promise<PrismaGiocatore> {
    return this.prisma.giocatore.create(args);
  }
  async updateGiocatore(
    args: Prisma.GiocatoreUpdateArgs
  ): Promise<PrismaGiocatore> {
    return this.prisma.giocatore.update(args);
  }
  async deleteGiocatore(
    args: Prisma.GiocatoreDeleteArgs
  ): Promise<PrismaGiocatore> {
    return this.prisma.giocatore.delete(args);
  }

  async findManos(
    parentId: string,
    args: Prisma.ManoFindManyArgs
  ): Promise<PrismaMano[]> {
    return this.prisma.giocatore
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .manos(args);
  }

  async findMossas(
    parentId: string,
    args: Prisma.MossaFindManyArgs
  ): Promise<PrismaMossa[]> {
    return this.prisma.giocatore
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mossas(args);
  }
  async GetSaldo(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async UpdateSaldo(args: UpdateSaldoDto): Promise<string> {
    throw new Error("Not implemented");
  }
}
