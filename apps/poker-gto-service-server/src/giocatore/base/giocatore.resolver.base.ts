/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Giocatore } from "./Giocatore";
import { GiocatoreCountArgs } from "./GiocatoreCountArgs";
import { GiocatoreFindManyArgs } from "./GiocatoreFindManyArgs";
import { GiocatoreFindUniqueArgs } from "./GiocatoreFindUniqueArgs";
import { CreateGiocatoreArgs } from "./CreateGiocatoreArgs";
import { UpdateGiocatoreArgs } from "./UpdateGiocatoreArgs";
import { DeleteGiocatoreArgs } from "./DeleteGiocatoreArgs";
import { ManoFindManyArgs } from "../../mano/base/ManoFindManyArgs";
import { Mano } from "../../mano/base/Mano";
import { MossaFindManyArgs } from "../../mossa/base/MossaFindManyArgs";
import { Mossa } from "../../mossa/base/Mossa";
import { UpdateSaldoDto } from "../UpdateSaldoDto";
import { GiocatoreService } from "../giocatore.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Giocatore)
export class GiocatoreResolverBase {
  constructor(
    protected readonly service: GiocatoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "read",
    possession: "any",
  })
  async _giocatoresMeta(
    @graphql.Args() args: GiocatoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Giocatore])
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "read",
    possession: "any",
  })
  async giocatores(
    @graphql.Args() args: GiocatoreFindManyArgs
  ): Promise<Giocatore[]> {
    return this.service.giocatores(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Giocatore, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "read",
    possession: "own",
  })
  async giocatore(
    @graphql.Args() args: GiocatoreFindUniqueArgs
  ): Promise<Giocatore | null> {
    const result = await this.service.giocatore(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Giocatore)
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "create",
    possession: "any",
  })
  async createGiocatore(
    @graphql.Args() args: CreateGiocatoreArgs
  ): Promise<Giocatore> {
    return await this.service.createGiocatore({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Giocatore)
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "update",
    possession: "any",
  })
  async updateGiocatore(
    @graphql.Args() args: UpdateGiocatoreArgs
  ): Promise<Giocatore | null> {
    try {
      return await this.service.updateGiocatore({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Giocatore)
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "delete",
    possession: "any",
  })
  async deleteGiocatore(
    @graphql.Args() args: DeleteGiocatoreArgs
  ): Promise<Giocatore | null> {
    try {
      return await this.service.deleteGiocatore(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Mano], { name: "manos" })
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "read",
    possession: "any",
  })
  async findManos(
    @graphql.Parent() parent: Giocatore,
    @graphql.Args() args: ManoFindManyArgs
  ): Promise<Mano[]> {
    const results = await this.service.findManos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Mossa], { name: "mossas" })
  @nestAccessControl.UseRoles({
    resource: "Mossa",
    action: "read",
    possession: "any",
  })
  async findMossas(
    @graphql.Parent() parent: Giocatore,
    @graphql.Args() args: MossaFindManyArgs
  ): Promise<Mossa[]> {
    const results = await this.service.findMossas(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Query(() => String)
  async GetSaldo(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetSaldo(args);
  }

  @graphql.Mutation(() => String)
  async UpdateSaldo(
    @graphql.Args()
    args: UpdateSaldoDto
  ): Promise<string> {
    return this.service.UpdateSaldo(args);
  }
}
