/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { GiocatoreService } from "../giocatore.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GiocatoreCreateInput } from "./GiocatoreCreateInput";
import { Giocatore } from "./Giocatore";
import { GiocatoreFindManyArgs } from "./GiocatoreFindManyArgs";
import { GiocatoreWhereUniqueInput } from "./GiocatoreWhereUniqueInput";
import { GiocatoreUpdateInput } from "./GiocatoreUpdateInput";
import { ManoFindManyArgs } from "../../mano/base/ManoFindManyArgs";
import { Mano } from "../../mano/base/Mano";
import { ManoWhereUniqueInput } from "../../mano/base/ManoWhereUniqueInput";
import { MossaFindManyArgs } from "../../mossa/base/MossaFindManyArgs";
import { Mossa } from "../../mossa/base/Mossa";
import { MossaWhereUniqueInput } from "../../mossa/base/MossaWhereUniqueInput";
import { UpdateSaldoDto } from "../UpdateSaldoDto";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GiocatoreControllerBase {
  constructor(
    protected readonly service: GiocatoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Giocatore })
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createGiocatore(
    @common.Body() data: GiocatoreCreateInput
  ): Promise<Giocatore> {
    return await this.service.createGiocatore({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        saldo: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Giocatore] })
  @ApiNestedQuery(GiocatoreFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async giocatores(@common.Req() request: Request): Promise<Giocatore[]> {
    const args = plainToClass(GiocatoreFindManyArgs, request.query);
    return this.service.giocatores({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        saldo: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Giocatore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async giocatore(
    @common.Param() params: GiocatoreWhereUniqueInput
  ): Promise<Giocatore | null> {
    const result = await this.service.giocatore({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        nome: true,
        saldo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Giocatore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateGiocatore(
    @common.Param() params: GiocatoreWhereUniqueInput,
    @common.Body() data: GiocatoreUpdateInput
  ): Promise<Giocatore | null> {
    try {
      return await this.service.updateGiocatore({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nome: true,
          saldo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Giocatore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteGiocatore(
    @common.Param() params: GiocatoreWhereUniqueInput
  ): Promise<Giocatore | null> {
    try {
      return await this.service.deleteGiocatore({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          nome: true,
          saldo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/manos")
  @ApiNestedQuery(ManoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "read",
    possession: "any",
  })
  async findManos(
    @common.Req() request: Request,
    @common.Param() params: GiocatoreWhereUniqueInput
  ): Promise<Mano[]> {
    const query = plainToClass(ManoFindManyArgs, request.query);
    const results = await this.service.findManos(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        carte: true,
        puntata: true,

        giocatore: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/manos")
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "update",
    possession: "any",
  })
  async connectManos(
    @common.Param() params: GiocatoreWhereUniqueInput,
    @common.Body() body: ManoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      manos: {
        connect: body,
      },
    };
    await this.service.updateGiocatore({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/manos")
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "update",
    possession: "any",
  })
  async updateManos(
    @common.Param() params: GiocatoreWhereUniqueInput,
    @common.Body() body: ManoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      manos: {
        set: body,
      },
    };
    await this.service.updateGiocatore({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/manos")
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "update",
    possession: "any",
  })
  async disconnectManos(
    @common.Param() params: GiocatoreWhereUniqueInput,
    @common.Body() body: ManoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      manos: {
        disconnect: body,
      },
    };
    await this.service.updateGiocatore({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/mossas")
  @ApiNestedQuery(MossaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Mossa",
    action: "read",
    possession: "any",
  })
  async findMossas(
    @common.Req() request: Request,
    @common.Param() params: GiocatoreWhereUniqueInput
  ): Promise<Mossa[]> {
    const query = plainToClass(MossaFindManyArgs, request.query);
    const results = await this.service.findMossas(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        azione: true,

        mano: {
          select: {
            id: true,
          },
        },

        giocatore: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mossas")
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "update",
    possession: "any",
  })
  async connectMossas(
    @common.Param() params: GiocatoreWhereUniqueInput,
    @common.Body() body: MossaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mossas: {
        connect: body,
      },
    };
    await this.service.updateGiocatore({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mossas")
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "update",
    possession: "any",
  })
  async updateMossas(
    @common.Param() params: GiocatoreWhereUniqueInput,
    @common.Body() body: MossaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mossas: {
        set: body,
      },
    };
    await this.service.updateGiocatore({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mossas")
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "update",
    possession: "any",
  })
  async disconnectMossas(
    @common.Param() params: GiocatoreWhereUniqueInput,
    @common.Body() body: MossaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mossas: {
        disconnect: body,
      },
    };
    await this.service.updateGiocatore({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/giocatore/:id/saldo")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetSaldo(
    @common.Body()
    body: UpdateSaldoDto
  ): Promise<string> {
    return this.service.GetSaldo(body);
  }

  @common.Patch("/giocatore/:id/saldo")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateSaldo(
    @common.Body()
    body: UpdateSaldoDto
  ): Promise<string> {
    return this.service.UpdateSaldo(body);
  }
}
