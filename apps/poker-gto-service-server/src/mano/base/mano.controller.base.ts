/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ManoService } from "../mano.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ManoCreateInput } from "./ManoCreateInput";
import { Mano } from "./Mano";
import { ManoFindManyArgs } from "./ManoFindManyArgs";
import { ManoWhereUniqueInput } from "./ManoWhereUniqueInput";
import { ManoUpdateInput } from "./ManoUpdateInput";
import { MossaFindManyArgs } from "../../mossa/base/MossaFindManyArgs";
import { Mossa } from "../../mossa/base/Mossa";
import { MossaWhereUniqueInput } from "../../mossa/base/MossaWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ManoControllerBase {
  constructor(
    protected readonly service: ManoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mano })
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMano(@common.Body() data: ManoCreateInput): Promise<Mano> {
    return await this.service.createMano({
      data: {
        ...data,

        giocatore: data.giocatore
          ? {
              connect: data.giocatore,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        carte: true,
        puntata: true,

        giocatore: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Mano] })
  @ApiNestedQuery(ManoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async manos(@common.Req() request: Request): Promise<Mano[]> {
    const args = plainToClass(ManoFindManyArgs, request.query);
    return this.service.manos({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        carte: true,
        puntata: true,

        giocatore: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mano })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mano(
    @common.Param() params: ManoWhereUniqueInput
  ): Promise<Mano | null> {
    const result = await this.service.mano({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        carte: true,
        puntata: true,

        giocatore: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mano })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMano(
    @common.Param() params: ManoWhereUniqueInput,
    @common.Body() data: ManoUpdateInput
  ): Promise<Mano | null> {
    try {
      return await this.service.updateMano({
        where: params,
        data: {
          ...data,

          giocatore: data.giocatore
            ? {
                connect: data.giocatore,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          carte: true,
          puntata: true,

          giocatore: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mano })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMano(
    @common.Param() params: ManoWhereUniqueInput
  ): Promise<Mano | null> {
    try {
      return await this.service.deleteMano({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          carte: true,
          puntata: true,

          giocatore: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/mossas")
  @ApiNestedQuery(MossaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Mossa",
    action: "read",
    possession: "any",
  })
  async findMossas(
    @common.Req() request: Request,
    @common.Param() params: ManoWhereUniqueInput
  ): Promise<Mossa[]> {
    const query = plainToClass(MossaFindManyArgs, request.query);
    const results = await this.service.findMossas(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        azione: true,

        mano: {
          select: {
            id: true,
          },
        },

        giocatore: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/mossas")
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "update",
    possession: "any",
  })
  async connectMossas(
    @common.Param() params: ManoWhereUniqueInput,
    @common.Body() body: MossaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mossas: {
        connect: body,
      },
    };
    await this.service.updateMano({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/mossas")
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "update",
    possession: "any",
  })
  async updateMossas(
    @common.Param() params: ManoWhereUniqueInput,
    @common.Body() body: MossaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mossas: {
        set: body,
      },
    };
    await this.service.updateMano({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/mossas")
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "update",
    possession: "any",
  })
  async disconnectMossas(
    @common.Param() params: ManoWhereUniqueInput,
    @common.Body() body: MossaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      mossas: {
        disconnect: body,
      },
    };
    await this.service.updateMano({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/mano/:id/puntata")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AddPuntata(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.AddPuntata(body);
  }

  @common.Get("/mano/:id/carte")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetCarte(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetCarte(body);
  }
}
