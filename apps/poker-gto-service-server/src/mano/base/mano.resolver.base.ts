/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Mano } from "./Mano";
import { ManoCountArgs } from "./ManoCountArgs";
import { ManoFindManyArgs } from "./ManoFindManyArgs";
import { ManoFindUniqueArgs } from "./ManoFindUniqueArgs";
import { CreateManoArgs } from "./CreateManoArgs";
import { UpdateManoArgs } from "./UpdateManoArgs";
import { DeleteManoArgs } from "./DeleteManoArgs";
import { MossaFindManyArgs } from "../../mossa/base/MossaFindManyArgs";
import { Mossa } from "../../mossa/base/Mossa";
import { Giocatore } from "../../giocatore/base/Giocatore";
import { AddPuntataDto } from "../AddPuntataDto";
import { ManoService } from "../mano.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Mano)
export class ManoResolverBase {
  constructor(
    protected readonly service: ManoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "read",
    possession: "any",
  })
  async _manosMeta(
    @graphql.Args() args: ManoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Mano])
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "read",
    possession: "any",
  })
  async manos(@graphql.Args() args: ManoFindManyArgs): Promise<Mano[]> {
    return this.service.manos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Mano, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "read",
    possession: "own",
  })
  async mano(@graphql.Args() args: ManoFindUniqueArgs): Promise<Mano | null> {
    const result = await this.service.mano(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mano)
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "create",
    possession: "any",
  })
  async createMano(@graphql.Args() args: CreateManoArgs): Promise<Mano> {
    return await this.service.createMano({
      ...args,
      data: {
        ...args.data,

        giocatore: args.data.giocatore
          ? {
              connect: args.data.giocatore,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mano)
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "update",
    possession: "any",
  })
  async updateMano(@graphql.Args() args: UpdateManoArgs): Promise<Mano | null> {
    try {
      return await this.service.updateMano({
        ...args,
        data: {
          ...args.data,

          giocatore: args.data.giocatore
            ? {
                connect: args.data.giocatore,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mano)
  @nestAccessControl.UseRoles({
    resource: "Mano",
    action: "delete",
    possession: "any",
  })
  async deleteMano(@graphql.Args() args: DeleteManoArgs): Promise<Mano | null> {
    try {
      return await this.service.deleteMano(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Mossa], { name: "mossas" })
  @nestAccessControl.UseRoles({
    resource: "Mossa",
    action: "read",
    possession: "any",
  })
  async findMossas(
    @graphql.Parent() parent: Mano,
    @graphql.Args() args: MossaFindManyArgs
  ): Promise<Mossa[]> {
    const results = await this.service.findMossas(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Giocatore, {
    nullable: true,
    name: "giocatore",
  })
  @nestAccessControl.UseRoles({
    resource: "Giocatore",
    action: "read",
    possession: "any",
  })
  async getGiocatore(
    @graphql.Parent() parent: Mano
  ): Promise<Giocatore | null> {
    const result = await this.service.getGiocatore(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => String)
  async AddPuntata(
    @graphql.Args()
    args: AddPuntataDto
  ): Promise<string> {
    return this.service.AddPuntata(args);
  }

  @graphql.Query(() => String)
  async GetCarte(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetCarte(args);
  }
}
