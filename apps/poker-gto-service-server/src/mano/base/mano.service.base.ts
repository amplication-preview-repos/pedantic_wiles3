/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Mano as PrismaMano,
  Mossa as PrismaMossa,
  Giocatore as PrismaGiocatore,
} from "@prisma/client";

import { AddPuntataDto } from "../AddPuntataDto";

export class ManoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ManoCountArgs, "select">): Promise<number> {
    return this.prisma.mano.count(args);
  }

  async manos(args: Prisma.ManoFindManyArgs): Promise<PrismaMano[]> {
    return this.prisma.mano.findMany(args);
  }
  async mano(args: Prisma.ManoFindUniqueArgs): Promise<PrismaMano | null> {
    return this.prisma.mano.findUnique(args);
  }
  async createMano(args: Prisma.ManoCreateArgs): Promise<PrismaMano> {
    return this.prisma.mano.create(args);
  }
  async updateMano(args: Prisma.ManoUpdateArgs): Promise<PrismaMano> {
    return this.prisma.mano.update(args);
  }
  async deleteMano(args: Prisma.ManoDeleteArgs): Promise<PrismaMano> {
    return this.prisma.mano.delete(args);
  }

  async findMossas(
    parentId: string,
    args: Prisma.MossaFindManyArgs
  ): Promise<PrismaMossa[]> {
    return this.prisma.mano
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .mossas(args);
  }

  async getGiocatore(parentId: string): Promise<PrismaGiocatore | null> {
    return this.prisma.mano
      .findUnique({
        where: { id: parentId },
      })
      .giocatore();
  }
  async AddPuntata(args: AddPuntataDto): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetCarte(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
