/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Partita as PrismaPartita } from "@prisma/client";
import { StartPartitaDto } from "../StartPartitaDto";

export class PartitaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PartitaCountArgs, "select">): Promise<number> {
    return this.prisma.partita.count(args);
  }

  async partitas(args: Prisma.PartitaFindManyArgs): Promise<PrismaPartita[]> {
    return this.prisma.partita.findMany(args);
  }
  async partita(
    args: Prisma.PartitaFindUniqueArgs
  ): Promise<PrismaPartita | null> {
    return this.prisma.partita.findUnique(args);
  }
  async createPartita(args: Prisma.PartitaCreateArgs): Promise<PrismaPartita> {
    return this.prisma.partita.create(args);
  }
  async updatePartita(args: Prisma.PartitaUpdateArgs): Promise<PrismaPartita> {
    return this.prisma.partita.update(args);
  }
  async deletePartita(args: Prisma.PartitaDeleteArgs): Promise<PrismaPartita> {
    return this.prisma.partita.delete(args);
  }
  async FinishPartita(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async StartPartita(args: StartPartitaDto): Promise<string> {
    throw new Error("Not implemented");
  }
}
