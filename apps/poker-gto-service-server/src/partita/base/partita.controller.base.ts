/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PartitaService } from "../partita.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PartitaCreateInput } from "./PartitaCreateInput";
import { Partita } from "./Partita";
import { PartitaFindManyArgs } from "./PartitaFindManyArgs";
import { PartitaWhereUniqueInput } from "./PartitaWhereUniqueInput";
import { PartitaUpdateInput } from "./PartitaUpdateInput";
import { StartPartitaDto } from "../StartPartitaDto";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PartitaControllerBase {
  constructor(
    protected readonly service: PartitaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Partita })
  @nestAccessControl.UseRoles({
    resource: "Partita",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPartita(
    @common.Body() data: PartitaCreateInput
  ): Promise<Partita> {
    return await this.service.createPartita({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        data: true,
        giocatori: true,
        vincitore: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Partita] })
  @ApiNestedQuery(PartitaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Partita",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async partitas(@common.Req() request: Request): Promise<Partita[]> {
    const args = plainToClass(PartitaFindManyArgs, request.query);
    return this.service.partitas({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        data: true,
        giocatori: true,
        vincitore: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Partita })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Partita",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async partita(
    @common.Param() params: PartitaWhereUniqueInput
  ): Promise<Partita | null> {
    const result = await this.service.partita({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        data: true,
        giocatori: true,
        vincitore: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Partita })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Partita",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePartita(
    @common.Param() params: PartitaWhereUniqueInput,
    @common.Body() data: PartitaUpdateInput
  ): Promise<Partita | null> {
    try {
      return await this.service.updatePartita({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          data: true,
          giocatori: true,
          vincitore: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Partita })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Partita",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePartita(
    @common.Param() params: PartitaWhereUniqueInput
  ): Promise<Partita | null> {
    try {
      return await this.service.deletePartita({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          data: true,
          giocatori: true,
          vincitore: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/partita/:id/finish")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FinishPartita(
    @common.Body()
    body: StartPartitaDto
  ): Promise<string> {
    return this.service.FinishPartita(body);
  }

  @common.Post("/partita/start")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async StartPartita(
    @common.Body()
    body: StartPartitaDto
  ): Promise<string> {
    return this.service.StartPartita(body);
  }
}
